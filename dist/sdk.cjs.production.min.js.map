{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  OKEX = 66,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC]: '0xE7Fb3e833eFE5F9c441105EB65Ef8b261266423B',\n  [ChainId.OKEX]: '0xE7Fb3e833eFE5F9c441105EB65Ef8b261266423B',\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC]: '0xA102072A4C07F06EC3B4900FDC4C7B80b6c57429',\n  [ChainId.OKEX]: '0x34686CBF7229ed0bff2Fbe7ED2CFC916317764f6',\n}\n\n// export const INIT_CODE_HASH = '0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3'\nexport const INIT_CODE_HASH = {\n  [ChainId.MAINNET]: '0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3',\n  [ChainId.RINKEBY]: '0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3',\n  [ChainId.ROPSTEN]: '0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3',\n  [ChainId.GÖRLI]: '0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3',\n  [ChainId.KOVAN]: '0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3',\n  [ChainId.MATIC]: '0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3',\n  [ChainId.OKEX]: '0xd9fecb0a9f5bfd6ce2daf90b441ed5860c3fed2fcde57ba9819eb98d2422e418',\n}\n\n\n\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public readonly usd?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\n\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKExChain')\n\n  public static readonly NATIVE = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.ROPSTEN]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.GÖRLI]: Currency.ETHER,\n    [ChainId.KOVAN]: Currency.ETHER,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.OKEX]: Currency.OKT\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    if (!(chainId in Currency.NATIVE)) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n    return Currency.NATIVE[chainId]\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    if (this?.symbol === 'ETH') {\n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n\n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === 'Ether') {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst NATIVE = Currency.ETHER\n\nexport { NATIVE }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x4c28f48448720e9000907BC2611F73022fdcE1fA',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    '0x8f8526dbfd6e38e3d8307702ca8469bae6c56c15',\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { BigintIsh, ChainId, Rounding, SolidityType, TEN } from '../../constants'\nimport { Currency, NATIVE } from '../currency'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\n\nimport { Fraction } from './fraction'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the NATIVE currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NATIVE, amount)\n  }\n  /**\n   * Helper that calls the constructor with the NATIVE currency\n   * @param amount ether amount in wei\n   */\n  public static native(amount: BigintIsh, chainId: ChainId): CurrencyAmount {\n    return new CurrencyAmount(Currency.getNativeCurrency(chainId), amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return new CurrencyAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[tokenA.chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[tokenA.chainId]\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'DFYNLP',\n      'Dfyn LP Token'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      ((!(input instanceof Token) && (input instanceof Currency)) && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      ((!(output instanceof Token) && (output instanceof Currency)) && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { Currency } from './currency'\nimport { Token, WETH, currencyEquals } from './token'\n\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Pair } from './pair'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Route } from './route'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../utils'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is NATIVE, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (!(currencyAmount.currency instanceof Token) && (currencyAmount.currency instanceof Currency)) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (!(currency instanceof Token) && (currency instanceof Currency)) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount \n        : ((!(route.input instanceof Token) && (route.input instanceof Currency)))\n          ? new CurrencyAmount(route.input, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : ((!(route.output instanceof Token) && (route.output instanceof Currency)))\n          ? new CurrencyAmount(route.output, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : new CurrencyAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : new CurrencyAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, Percent, Token, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency instanceof Token ? false : true\n    const etherOut = trade.outputAmount.currency instanceof Token ? false : true\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\n// import { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(\"https://rpc-mainnet.maticvigil.com/v1/1fcb1711b433804cea13ef670b1a5245c27562a6\"),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n          TOKEN_DECIMALS_CACHE = {\n            ...TOKEN_DECIMALS_CACHE,\n            [chainId]: {\n              ...TOKEN_DECIMALS_CACHE?.[chainId],\n              [address]: decimals\n            }\n          }\n          return decimals\n        })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(\"https://rpc-mainnet.maticvigil.com/v1/1fcb1711b433804cea13ef670b1a5245c27562a6\")\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","MATIC","OKEX","ROUTER_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","this","getNativeCurrencyName","getSymbol","getName","ETHER","OKT","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}